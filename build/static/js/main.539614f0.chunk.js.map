{"version":3,"sources":["components/Song.jsx","components/Player.jsx","components/LibrarySong.jsx","components/Library.jsx","components/ListQueue.jsx","components/ListRecommend.jsx","components/List.jsx","components/Nav.jsx","data.jsx","App.js","index.js"],"names":["Song","_ref","currentSong","songInfo","songAnimation","transform","concat","currentTime","_jsxs","className","children","_jsx","src","cover","alt","name","style","artist","memo","Player","isPlaying","setIsPlaying","audioRef","setSongInfo","songs","setCurrentSong","setSongs","activeLibraryHandler","nextPrev","activeSong","map","song","id","active","getTime","time","Math","floor","slice","skipTrackHandler","async","currentIndex","findIndex","direction","length","current","play","trackAnim","animationPercentage","volume","setVolume","useState","isMuted","setIsMuted","prevVolumeValue","setPrevVolumeValue","background","color","min","max","duration","value","onChange","e","target","type","FontAwesomeIcon","onClick","size","icon","faAngleLeft","pause","faPause","faPlay","faAngleRight","volumeLevel","onVolumeClickHandler","faVolumeMute","faVolumeUp","LibrarySong","listQueue","setListQueue","typeOfButton","useEffect","undefined","lq","correspondingInSongs","find","s","event","some","queueSong","stopPropagation","updatedListQueue","filter","faPlus","faMinus","Library","libraryStatus","ListQueue","listRecommend","setListRecommend","_Fragment","display","justifyContent","alignItems","ListRecommend","arrtemp","console","log","recommendedSongs","setRecommendedSongs","createAttributeSet","Set","attr","SongRecommender","constructor","queue","allSongs","this","queueAttributeSets","allSongsAttributeSets","jaccardSimMatrix","setB","j","setA","i","sim","intersection","x","has","union","jaccardSimilarity","getTopRecommendations","simScores","totalScore","reduce","sum","score","matchesArtist","_ref2","sort","a","b","_ref3","topRecommendations","List","listStatus","Nav","setLibraryStatus","setListStatus","darkThemeHandler","faMusic","htmlFor","chillHop","audio","uuidv4","lyric","mood","energy","genre","album","explicit","App","data","darkTheme","setDarkTheme","useRef","timeUpdateHandler","roundedCurrentTime","round","roundedDuration","onTimeUpdate","onLoadedMetadata","ref","onEnded","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.539614f0.chunk.js","sourcesContent":["import { memo } from \"react\";\r\n\r\nconst Song = ({ currentSong, songInfo }) => {\r\n    const songAnimation = {\r\n        transform: `rotate(${songInfo.currentTime * 10}deg)`,\r\n    };\r\n\r\n    return (\r\n        <div className=\"song_container\">\r\n            <img\r\n                src={currentSong.cover}\r\n                alt={currentSong.name}\r\n                style={songAnimation}\r\n            />\r\n            <h2>{currentSong.name}</h2>\r\n            <h3>{currentSong.artist}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Song);","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faPlay,\r\n    faPause,\r\n    faAngleLeft,\r\n    faAngleRight,\r\n    faVolumeMute,\r\n    faVolumeUp,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useState, memo } from \"react\";\r\n\r\nconst Player = ({\r\n    currentSong,\r\n    isPlaying,\r\n    setIsPlaying,\r\n    audioRef,\r\n    songInfo,\r\n    setSongInfo,\r\n    songs,\r\n    setCurrentSong,\r\n    setSongs,\r\n}) => {    \r\n    const activeLibraryHandler = (nextPrev) => {\r\n        const activeSong = songs.map((song) => {\r\n            if (song.id === nextPrev.id) {\r\n                return { ...song, active: true };\r\n            } else {\r\n                return { ...song, active: false };\r\n            }\r\n        });\r\n        setSongs(activeSong);\r\n    };\r\n\r\n    const playSongHandler = () => {\r\n        if (isPlaying) {\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        } else {\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    };\r\n\r\n    const getTime = (time) => {\r\n        return (\r\n            Math.floor(time / 60) +\r\n            \":\" +\r\n            (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        );\r\n    };\r\n\r\n    const dragHandler = (e) => {\r\n        audioRef.current.currentTime = e.target.value;\r\n        setSongInfo({ ...songInfo, currentTime: e.target.value });\r\n    };\r\n\r\n    const skipTrackHandler = async (direction) => {\r\n        let currentIndex = songs.findIndex(\r\n            (song) => song.id === currentSong.id\r\n        );\r\n\r\n        if (direction === \"forward\") {\r\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\r\n        }\r\n        if (direction === \"backward\") {\r\n            if (currentIndex === 0) {\r\n                await setCurrentSong(songs[songs.length - 1]);\r\n                activeLibraryHandler(songs[songs.length - 1]);\r\n            } else {\r\n                await setCurrentSong(songs[currentIndex - 1]);\r\n                activeLibraryHandler(songs[currentIndex - 1]);\r\n            }\r\n        }\r\n        if (isPlaying) audioRef.current.play();\r\n    };\r\n\r\n    const trackAnim = {\r\n        transform: `translateX(${songInfo.animationPercentage}%)`,\r\n    };\r\n\r\n    const [volume, setVolume] = useState(50);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [prevVolumeValue, setPrevVolumeValue] = useState(volume);\r\n\r\n    const onVolumeClickHandler = () => {\r\n        if (isMuted) {\r\n            audioRef.current.volume = prevVolumeValue / 100;\r\n            setVolume(prevVolumeValue);\r\n            setIsMuted(false);\r\n        } else {\r\n            audioRef.current.volume = 0;\r\n            setIsMuted(true);\r\n            setVolume(0);\r\n            setPrevVolumeValue(volume);\r\n        }\r\n    };\r\n\r\n    const onVolumeChangeHandler = (e) => {\r\n        const volumeLevel = e.target.value / 100;\r\n        audioRef.current.volume = volumeLevel;\r\n        setVolume(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"time_control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n                <div\r\n                    style={{\r\n                        background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\r\n                    }}\r\n                    className=\"track\"\r\n                >\r\n                    <input\r\n                        min={0}\r\n                        max={songInfo.duration || 0}\r\n                        value={songInfo.currentTime}\r\n                        onChange={dragHandler}\r\n                        type=\"range\"\r\n                    />\r\n                    <div style={trackAnim} className=\"animate_track\"></div>\r\n                </div>\r\n                <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\r\n            </div>\r\n            <div className=\"play_volume_wrapper\">\r\n                <div className=\"play_control\">\r\n                    <FontAwesomeIcon\r\n                        onClick={() => skipTrackHandler(\"backward\")}\r\n                        className=\"btn_control skip_backward\"\r\n                        size=\"2x\"\r\n                        icon={faAngleLeft}\r\n                    />\r\n                    <FontAwesomeIcon\r\n                        onClick={() => playSongHandler()}\r\n                        className=\"btn_control play\"\r\n                        size=\"2x\"\r\n                        icon={isPlaying ? faPause : faPlay}\r\n                    />\r\n                    <FontAwesomeIcon\r\n                        onClick={() => skipTrackHandler(\"forward\")}\r\n                        className=\"btn_control skip_forward\"\r\n                        size=\"2x\"\r\n                        icon={faAngleRight}\r\n                    />\r\n                </div>\r\n                <div className=\"volume_control\">\r\n                    <div\r\n                        className=\"track_volume\"\r\n                        style={{\r\n                            background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\r\n                        }}\r\n                    >\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={100}\r\n                            onChange={onVolumeChangeHandler}\r\n                            value={volume}\r\n                        />\r\n                        <div\r\n                            className=\"animate_volume\"\r\n                            style={{ transform: `translateX(${volume}%)` }}\r\n                        ></div>\r\n                    </div>\r\n                    <FontAwesomeIcon\r\n                        onClick={onVolumeClickHandler}\r\n                        className=\"volume_icon\"\r\n                        icon={isMuted ? faVolumeMute : faVolumeUp}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Player);","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function LibrarySong({\r\n    song,\r\n    songs,\r\n    setSongs,\r\n    currentSong,\r\n    setCurrentSong,\r\n    listQueue,\r\n    setListQueue,\r\n    id,\r\n    audioRef,\r\n    isPlaying,\r\n    typeOfButton\r\n}) {\r\n    useEffect(() => {\r\n        if(listQueue !== undefined) {\r\n            listQueue.map((lq) => {\r\n                const correspondingInSongs = songs.find((s) => s.name === lq.name)\r\n                if(correspondingInSongs) {\r\n                    lq.active = correspondingInSongs.active\r\n                }\r\n            })\r\n        }\r\n    }, [songs])\r\n    \r\n    const songSelectHandler = async () => {\r\n        await setCurrentSong(song);\r\n\r\n        const activeSong = songs.map((song) => {\r\n            if (song.id === id) {\r\n                return { ...song, active: true };\r\n            } else {\r\n                return { ...song, active: false };\r\n            }\r\n        });\r\n        setSongs(activeSong);\r\n\r\n        if (isPlaying) audioRef.current.play();\r\n    };\r\n\r\n    const addToQueue = (event) => {\r\n        const isSongInQueue = listQueue.some((queueSong) => queueSong.id === song.id);\r\n        if (!isSongInQueue) {\r\n            setListQueue([...listQueue, {...song, active: false}]);\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    const removeFromQueue = (event) => {\r\n        if(listQueue !== undefined) {\r\n            const updatedListQueue = listQueue.filter((queueSong) => queueSong.id !== song.id);\r\n            setListQueue(updatedListQueue);\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={songSelectHandler}\r\n            className={`library_song ${song.active ? \"selected_song\" : \"\"}`}\r\n        >\r\n            <img src={song.cover} alt={song.name} />\r\n            <div className=\"song_description\">\r\n                    <h4>{song.name}</h4>\r\n                    <h6>{song.artist}</h6>\r\n            </div>\r\n            { typeOfButton && (\r\n                <button onClick={typeOfButton === \"faPlus\" ? addToQueue : removeFromQueue}>\r\n                    <FontAwesomeIcon id=\"icon\" icon={typeOfButton === \"faPlus\" ? faPlus : faMinus} />\r\n                </button>\r\n            )} \r\n        </div>\r\n    );\r\n}\r\n","import LibrarySong from \"./LibrarySong\";\r\n\r\nexport default function Library({\r\n    songs,\r\n    setSongs,\r\n    setCurrentSong,\r\n    audioRef,\r\n    isPlaying,\r\n    libraryStatus,\r\n    listQueue,\r\n    setListQueue,\r\n    typeOfButton\r\n}) {\r\n    return (\r\n        <div className={`library ${libraryStatus ? \"active_library\" : \"\"}`}>\r\n            <h2>Library</h2>\r\n            <div className=\"library_songs\">\r\n                {songs.map((song) => (\r\n                    <LibrarySong\r\n                        setCurrentSong={setCurrentSong}\r\n                        song={song}\r\n                        setSongs={setSongs}\r\n                        songs={songs}\r\n                        id={song.id}\r\n                        key={song.id}\r\n                        isPlaying={isPlaying}\r\n                        audioRef={audioRef}\r\n                        listQueue={listQueue}\r\n                        setListQueue={setListQueue}\r\n                        typeOfButton={typeOfButton}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import LibrarySong from \"./LibrarySong\";\r\n\r\nexport default function ListQueue({\r\n    songs,\r\n    setSongs,\r\n    currentSong,\r\n    setCurrentSong,\r\n    audioRef,\r\n    isPlaying,\r\n    listQueue,\r\n    setListQueue,\r\n    listRecommend,\r\n    setListRecommend\r\n}) {\r\n    return (\r\n        <>\r\n            <h2>Queue</h2>\r\n            <div className=\"list_songs\" style={ listQueue.length == 0 ? {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center'\r\n            } : null }>\r\n                {\r\n                    listQueue.length !== 0 ? listQueue.map((song) => (\r\n                    <LibrarySong\r\n                        listQueue={listQueue}\r\n                        setListQueue={setListQueue}\r\n                        currentSong={currentSong}\r\n                        setCurrentSong={setCurrentSong}\r\n                        song={song}\r\n                        setSongs={setSongs}\r\n                        songs={songs}\r\n                        id={song.id}\r\n                        key={song.id}\r\n                        isPlaying={isPlaying}\r\n                        audioRef={audioRef}\r\n                        typeOfButton={\"faMinus\"}\r\n                    />\r\n                    )) : (\r\n                        <p style={{\r\n                            color: 'gray'\r\n                        }}>\r\n                            You haven't add any songs yet to queue\r\n                        </p>\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import LibrarySong from \"./LibrarySong\";\r\nimport { useEffect, useState, memo } from \"react\";\r\n\r\nconst ListRecommend = ({\r\n    songs,\r\n    setSongs,\r\n    currentSong,\r\n    setCurrentSong,\r\n    audioRef,\r\n    isPlaying,\r\n    listQueue,\r\n    setListQueue,\r\n    typeOfButton,\r\n}) => {\r\n    let arrtemp = songs;\r\n    console.log(\"Mảng copy (arrtemp) từ mảng data gốc (songs): \", arrtemp);\r\n\r\n    const [recommendedSongs, setRecommendedSongs] = useState([]);\r\n\r\n    console.log(\"Danh sách bài hát gốc (songs): \", songs );\r\n    console.log(\"Danh sách các bài hiện có trong hàng chờ (listQueue): \",listQueue)\r\n    console.log(\"Danh sách các bài được gợi ý (recommendedSongs): \",recommendedSongs)\r\n\r\n    // Hàm tính Jaccard similarity\r\n    function jaccardSimilarity(setA, setB) {\r\n        const intersection = new Set([...setA].filter(x => setB.has(x)));\r\n        const union = new Set([...setA, ...setB]);\r\n        return intersection.size / union.size;\r\n    }\r\n\r\n    // Hàm tạo tập hợp từ các thuộc tính của bài hát\r\n    function createAttributeSet(song) {\r\n        return new Set(['genre', 'artist', 'album'].map(attr => song[attr]));\r\n    }\r\n\r\n    // Lớp hệ thống gợi ý\r\n    class SongRecommender {\r\n        constructor(queue, allSongs) {\r\n            this.queue = queue;\r\n            this.allSongs = allSongs;\r\n\r\n            // Tính toán tập hợp cho mỗi bài hát trong queue và allSongs\r\n            this.queueAttributeSets = queue.map(createAttributeSet);\r\n            this.allSongsAttributeSets = allSongs.map(createAttributeSet);\r\n\r\n            // Tính Jaccard similarity giữa mỗi bài trong queue với mỗi bài trong allSongs\r\n            this.jaccardSimMatrix = this.allSongsAttributeSets.map((setB, j) =>\r\n                this.queueAttributeSets.map((setA, i) => {\r\n                    const sim = jaccardSimilarity(setA, setB);\r\n                    console.log(`Jaccard similarity between ${this.allSongs[j].name} and ${this.queue[i].name}: ${sim}`);\r\n                    return sim;\r\n                })\r\n            );\r\n        }\r\n\r\n        getTopRecommendations() {\r\n            // Tính tổng điểm số Jaccard cho mỗi bài hát trong allSongs với tất cả các bài hát trong queue\r\n            const totalSimScores = this.jaccardSimMatrix.map((simScores, j) => ({\r\n                song: this.allSongs[j],\r\n                totalScore: simScores.reduce((sum, score) => sum + score, 0),\r\n                matchesArtist: this.queue.some(queueSong => queueSong.artist === this.allSongs[j].artist)\r\n            }));\r\n\r\n            // Loại bỏ các bài hát đã có trong queue\r\n            const filteredSimScores = totalSimScores.filter(({ song }) =>\r\n                !this.queue.some(queueSong => queueSong.id === song.id)\r\n            );\r\n\r\n            // Sắp xếp theo tổng điểm số Jaccard giảm dần và ưu tiên bài hát có cùng artist nếu điểm số bằng nhau\r\n            const sortedSimScores = filteredSimScores.sort((a, b) =>\r\n                b.totalScore - a.totalScore || (b.matchesArtist ? 1 : -1)\r\n            );\r\n\r\n            // Lấy 3 bài hát có điểm số cao nhất\r\n            return sortedSimScores.slice(0, 3).map(({ song }) => song);\r\n        }\r\n    }\r\n\r\n    // Khởi tạo hệ thống gợi ý\r\n    useEffect(() => {\r\n        if (listQueue.length === 0) {\r\n            setRecommendedSongs([]);\r\n        }\r\n\r\n        if (listQueue.length > 0) {\r\n            const recommender = new SongRecommender(listQueue, arrtemp);\r\n            const topRecommendations = recommender.getTopRecommendations();\r\n\r\n            console.log(\"Top Recommended Songs: \", topRecommendations);\r\n            setRecommendedSongs(topRecommendations);\r\n        }\r\n    }, [listQueue, arrtemp]);\r\n\r\n    return (\r\n        <>\r\n            <h2>Recommend</h2>\r\n            <div className=\"list_songs\" style={recommendedSongs.length === 0 ? {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center'\r\n            } : null}>\r\n                {\r\n                    recommendedSongs.length !== 0 ? recommendedSongs.map((song) => (\r\n                        <LibrarySong\r\n                            setCurrentSong={setCurrentSong}\r\n                            song={song}\r\n                            setSongs={setSongs}\r\n                            songs={songs}\r\n                            id={song.id}\r\n                            key={song.id}\r\n                            isPlaying={isPlaying}\r\n                            audioRef={audioRef}\r\n                            typeOfButton={typeOfButton}\r\n                            listQueue={listQueue}\r\n                            setListQueue={setListQueue}\r\n                        />\r\n                    )) : (\r\n                        <p style={{\r\n                            color: 'gray'\r\n                        }}>\r\n                            There are no suitable songs to recommend\r\n                        </p>\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(ListRecommend);\r\n","import ListQueue from \"./ListQueue\";\r\nimport ListRecommend from \"./ListRecommend\";\r\n\r\nexport default function List({\r\n    songs,\r\n    setSongs,\r\n    currentSong,\r\n    setCurrentSong,\r\n    audioRef,\r\n    isPlaying,\r\n    listStatus,\r\n    listQueue,\r\n    setListQueue,\r\n    listRecommend,\r\n    setListRecommend,\r\n    typeOfButton,\r\n}) {\r\n    return (\r\n        <div className={`list ${listStatus ? \"active_list\" : \"\"}`}>\r\n            <ListQueue\r\n                songs={songs}\r\n                setSongs={setSongs}\r\n                currentSong={currentSong}\r\n                setCurrentSong={setCurrentSong}\r\n                audioRef={audioRef}\r\n                isPlaying={isPlaying}\r\n                listQueue={listQueue}\r\n                setListQueue={setListQueue}\r\n                listRecommend={listRecommend}\r\n                setListRecommend={setListRecommend}\r\n            />\r\n            <ListRecommend\r\n                songs={songs}\r\n                setSongs={setSongs}\r\n                currentSong={currentSong}\r\n                setCurrentSong={setCurrentSong}\r\n                audioRef={audioRef}\r\n                isPlaying={isPlaying}\r\n                listQueue={listQueue}\r\n                setListQueue={setListQueue}\r\n                listRecommend={listRecommend}\r\n                setListRecommend={setListRecommend}\r\n                typeOfButton={typeOfButton}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import { memo } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nav = ({\r\n    libraryStatus,\r\n    setLibraryStatus,\r\n    listStatus,\r\n    setListStatus,\r\n    darkThemeHandler,\r\n}) => {\r\n    return (\r\n        <nav>\r\n            <h1>Waves</h1>\r\n\r\n            <button\r\n                onClick={() => {\r\n                    setLibraryStatus(!libraryStatus)\r\n                    setListStatus(false)\r\n                }}\r\n                className={libraryStatus ? \"active_library_btn\" : \"\"}\r\n            >\r\n                Library <FontAwesomeIcon icon={faMusic} />\r\n            </button>\r\n\r\n            <button\r\n                onClick={() => {\r\n                    setListStatus(!listStatus)\r\n                    setLibraryStatus(false)\r\n                }}\r\n                className={listStatus ? \"active_list_btn\" : \"\"}\r\n            >\r\n                List <FontAwesomeIcon icon={faMusic} />\r\n            </button>\r\n\r\n            <div className=\"switch\" id=\"switch\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name=\"switch\"\r\n                    className=\"switch-checkbox\"\r\n                    id=\"myswitch\"\r\n                    onChange={darkThemeHandler}\r\n                />\r\n                <label className=\"switch-label\" htmlFor=\"myswitch\">\r\n                    <span className=\"switch-inner\"></span>\r\n                    <span className=\"switch-switch\"></span>\r\n                </label>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default memo(Nav);"," import { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction chillHop() {\r\n    return [\r\n        {\r\n            name: \"Kill Bill\",\r\n            cover:\r\n                \"https://i1.sndcdn.com/artworks-L1qZHQcUl4fpjOya-gpaSLQ-t500x500.jpg\",\r\n            artist: \"SZA\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/SZA%20-%20Kill%20Bill.mp3?raw=true\",\r\n            color: [\"#0076d1\", \"#180070\"],\r\n            id: uuidv4(),\r\n            active: true,\r\n            lyric: 0.4,\r\n            mood: 0.6,\r\n            energy: 0.5,\r\n            genre: \"R&B\",\r\n            album: \"SOS\",\r\n            explicit: false\r\n\r\n        },\r\n        {\r\n            name: \"BLUE\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/Hit%20me%20hard%20and%20soft%20(Billie).png?raw=true\",\r\n            artist: \"Billie Eilish\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/Billie%20Eilish%20-%20BLUE.mp3?raw=true\",\r\n            color: [\"#180070\", \"#00081f\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.65\",\r\n            mood: \"0.3\",\r\n            energy: \"0.35\",\r\n            genre: \"Pop\",\r\n            album: \"Hit me hard and soft\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"Blank Space\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/1989%20(%20Blank%20Space%20).png?raw=true\",\r\n            artist: \"Taylor Swift\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/Taylor%20Swift%20-%20Blank%20Space.mp3?raw=true\",\r\n            color: [\"#ffaddd\", \"#ff007b\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.73\",\r\n            mood: \"0.8\",\r\n            energy: \"0.85\",\r\n            genre: \"Pop\",\r\n            album: \"1989\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"Blinding Lights\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/After%20Hours%20The%20Weeknd.jpg?raw=true\",\r\n            artist: \"The Weekend\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/The%20Weeknd%20-%20Blinding%20Lights.mp3?raw=true\",\r\n            color: [\"#CD607D\", \"#c94043\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.33\",\r\n            mood: \"1.0\",\r\n            energy: \"0.95\",\r\n            genre: \"R&B\",\r\n            album: \"Afterhour\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"Ticking\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/Zach%20Bryan.png?raw=true\",\r\n            artist: \"Zach Bryan\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/Zach%20Bryan%20-%20Ticking.mp3?raw=true\",\r\n            color: [\"#205950\", \"#2ab3bf\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.77\",\r\n            mood: \"0.1\",\r\n            energy: \"0.45\",\r\n            genre: \"Country\",\r\n            album: \"Zach Bryan\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"CHIHIRO\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/Hit%20me%20hard%20and%20soft%20(Billie).png?raw=true\",\r\n            artist: \"Billie Eilish\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/Billie%20Eilish%20-%20CHIHIRO.mp3?raw=true\",\r\n            color: [\"#180070\", \"#00081f\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.51\",\r\n            mood: \"0.5\",\r\n            energy: \"0.65\",\r\n            genre: \"Pop\",\r\n            album: \"Hit me hard and soft\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"Love Story\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/Fearless%20(%20Love%20Story%20).png?raw=true\",\r\n            artist: \"Taylor Swift\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/Taylor%20Swift%20-%20Love%20Story.mp3?raw=true\",\r\n            color: [\"#ffaddd\", \"#ff007b\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.68\",\r\n            mood: \"0.75\",\r\n            energy: \"0.85\",\r\n            genre: \"Country\",\r\n            album: \"Fearless\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"Save Your Tears\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/After%20Hours%20The%20Weeknd.jpg?raw=true\",\r\n            artist: \"The Weekend\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/The%20Weeknd%20-%20Save%20Your%20Tears.mp3?raw=true\",\r\n            color: [\"#EF8EA9\", \"#ab417f\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.44\",\r\n            mood: \"0.55\",\r\n            energy: \"0.75\",\r\n            genre: \"R&B\",\r\n            album: \"Afterhour\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"SKINNY\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/Hit%20me%20hard%20and%20soft%20(Billie).png?raw=true\",\r\n            artist: \"Billie Eilish\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/Billie%20Eilish%20-%20SKINNY.mp3?raw=true\",\r\n            color: [\"#180070\", \"#00081f\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.64\",\r\n            mood: \"0.25\",\r\n            energy: \"0.53\",\r\n            genre: \"Pop\",\r\n            album: \"Hit me hard and soft\",\r\n            explicit: false\r\n        },\r\n        {\r\n            name: \"Peter\",\r\n            cover:\r\n                \"https://github.com/q113pt/MusicLibrary/blob/main/Cover/the%20ttpd%20(%20Peter%20).png?raw=true\",\r\n            artist: \"Taylor Swift\",\r\n            audio: \"https://github.com/q113pt/MusicLibrary/blob/main/Taylor%20Swift%20-%20Peter.mp3?raw=true\",\r\n            color: [\"#ffaddd\", \"#ff007b\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n            lyric: \"0.84\",\r\n            mood: \"0.28\",\r\n            energy: \"0.73\",\r\n            genre: \"Folk\",\r\n            album: \"The Tortured Poets Department\",\r\n            explicit: false\r\n        },\r\n    ];\r\n}\r\n\r\nexport default chillHop;","import { useState, useEffect, useRef } from \"react\";\r\nimport \"./styles/app.scss\";\r\nimport Song from \"./components/Song\";\r\nimport Player from \"./components/Player\";\r\nimport Library from \"./components/Library\";\r\nimport List from \"./components/List\";\r\nimport Nav from \"./components/Nav\";\r\nimport data from \"./data\";\r\n\r\nfunction App() {\r\n    const [songs, setSongs] = useState(data());\r\n    const [currentSong, setCurrentSong] = useState(songs[0]);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [libraryStatus, setLibraryStatus] = useState(false);\r\n    const [listStatus, setListStatus] = useState(false);\r\n    const [listQueue, setListQueue] = useState([]);\r\n    const [listRecommend, setListRecommend] = useState([]);\r\n    const [songInfo, setSongInfo] = useState({\r\n        currentTime: 0,\r\n        duration: 0,\r\n        animationPercentage: 0,\r\n    });\r\n    const [darkTheme, setDarkTheme] = useState(false);\r\n    const audioRef = useRef(null);\r\n\r\n    const timeUpdateHandler = (e) => {\r\n        const currentTime = e.target.currentTime;\r\n        const duration = e.target.duration;\r\n        const roundedCurrentTime = Math.round(currentTime);\r\n        const roundedDuration = Math.round(duration);\r\n        const animationPercentage = Math.round(\r\n            (roundedCurrentTime / roundedDuration) * 100\r\n        );\r\n\r\n        setSongInfo({\r\n            ...songInfo,\r\n            currentTime,\r\n            duration,\r\n            animationPercentage,\r\n        });\r\n    };\r\n\r\n    const activeLibraryHandler = (nextPrev) => {\r\n        const activeSong = songs.map((song) => {\r\n            if (song.id === nextPrev.id) {\r\n                return { ...song, active: true };\r\n            } else {\r\n                return { ...song, active: false };\r\n            }\r\n        });\r\n        setSongs(activeSong);\r\n    };\r\n\r\n    const songEndHandler = async () => {\r\n        if (listQueue.length !== 0) {\r\n            let currentIndex = listQueue.findIndex(\r\n                (lq) => lq.id === currentSong.id\r\n            );\r\n            await setCurrentSong(listQueue[(currentIndex + 1) % listQueue.length]);\r\n            activeLibraryHandler(listQueue[(currentIndex + 1) % listQueue.length]);\r\n        } else {\r\n            let currentIndex = songs.findIndex(\r\n                (song) => song.id === currentSong.id\r\n            );\r\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\r\n        }\r\n\r\n        if (isPlaying) audioRef.current.play();\r\n    };\r\n\r\n    const darkThemeHandler = () => {\r\n        if (darkTheme === false) {\r\n            setDarkTheme(true);\r\n        } else {\r\n            setDarkTheme(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={`App \r\n                        ${libraryStatus ? \"library_active\" : \"\"} \r\n                        ${darkTheme ? \"dark\" : \"\"}\r\n                        ${listStatus ? \"list_active\" : \"\"}`}\r\n        >\r\n            <Nav\r\n                libraryStatus={libraryStatus}\r\n                setLibraryStatus={setLibraryStatus}\r\n                listStatus={listStatus}\r\n                setListStatus={setListStatus}\r\n                darkTheme={darkTheme}\r\n                setDarkTheme={setDarkTheme}\r\n                darkThemeHandler={darkThemeHandler}\r\n            />\r\n            <Song currentSong={currentSong} songInfo={songInfo} />\r\n            <Player\r\n                isPlaying={isPlaying}\r\n                setIsPlaying={setIsPlaying}\r\n                currentSong={currentSong}\r\n                audioRef={audioRef}\r\n                songInfo={songInfo}\r\n                setSongInfo={setSongInfo}\r\n                songs={songs}\r\n                setCurrentSong={setCurrentSong}\r\n                setSongs={setSongs}\r\n            />\r\n            <Library\r\n                libraryStatus={libraryStatus}\r\n                isPlaying={isPlaying}\r\n                setCurrentSong={setCurrentSong}\r\n                audioRef={audioRef}\r\n                songs={songs}\r\n                setSongs={setSongs}\r\n                listQueue={listQueue}\r\n                setListQueue={setListQueue}\r\n                typeOfButton={\"faPlus\"}\r\n            />\r\n            <List\r\n                listStatus={listStatus}\r\n                isPlaying={isPlaying}\r\n                currentSong={currentSong}\r\n                setCurrentSong={setCurrentSong}\r\n                audioRef={audioRef}\r\n                songs={songs}\r\n                setSongs={setSongs}\r\n                listQueue={listQueue}\r\n                setListQueue={setListQueue}\r\n                listRecommend={listRecommend}\r\n                setListRecommend={setListRecommend}\r\n                typeOfButton={\"faPlus\"}\r\n            />\r\n            <audio\r\n                onTimeUpdate={timeUpdateHandler}\r\n                onLoadedMetadata={timeUpdateHandler}\r\n                ref={audioRef}\r\n                src={currentSong.audio}\r\n                onEnded={songEndHandler}\r\n            ></audio>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}